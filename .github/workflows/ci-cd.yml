name: Simple CI/CD Pipeline

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]

env:
  REGISTRY: asia-southeast1-docker.pkg.dev
  PROJECT_ID: verdant-bruin-464819-i9
  REPOSITORY: fastapi-todoapp
  IMAGE_NAME: fastapi-todoapp
  GKE_CLUSTER: todoapp-cluster
  GKE_ZONE: asia-southeast1-b

jobs:
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker ${{ env.REGISTRY }}
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }} .
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:staging-latest .
    
    - name: Push Docker image
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:staging-latest
    
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}
    
    - name: Create staging namespace
      run: |
        kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy to staging
      run: |
        # Update the image in the deployment
        kubectl set image deployment/fastapi-deployment fastapi-todo=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }} -n staging
        
        # If deployment doesn't exist, create it
        if ! kubectl get deployment fastapi-deployment -n staging >/dev/null 2>&1; then
          # Create MySQL first
          kubectl apply -f k8s/mysql-deployment.yaml -n staging
          kubectl wait --for=condition=ready pod -l app=mysql -n staging --timeout=300s
          
          # Create FastAPI deployment
          kubectl apply -f k8s/fastapi-deployment.yaml -n staging
        fi
        
        # Wait for deployment to complete
        kubectl rollout status deployment/fastapi-deployment -n staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        # Port forward to test the deployment
        kubectl port-forward service/fastapi-service 8080:80 -n staging &
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Test main page
        curl -f http://localhost:8080/ || exit 1
        
        echo "‚úÖ Deployment successful!"
        echo "Staging environment updated with commit: ${{ github.sha }}"

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Success notification
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "üéâ Deployment to staging successful!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref }}"
        echo "Actor: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "::notice title=Deployment Success::Staging environment successfully updated with commit ${{ github.sha }}"
    
    - name: Failure notification
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Build & Deploy: ${{ needs.build-and-deploy.result }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref }}"
        echo "Actor: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "::error title=Deployment Failed::Staging deployment failed for commit ${{ github.sha }}"
        exit 1

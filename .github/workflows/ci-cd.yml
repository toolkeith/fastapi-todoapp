name: FastAPI Todo App CI/CD Pipeline

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]

env:
  REGISTRY: asia-southeast1-docker.pkg.dev
  PROJECT_ID: verdant-bruin-464819-i9
  REPOSITORY: fastapi-todoapp
  IMAGE_NAME: fastapi-todoapp
  GKE_CLUSTER: todoapp-cluster
  GKE_ZONE: asia-southeast1-a
  DEPLOYMENT_NAME: fastapi-deployment
  NAMESPACE: staging

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: todoapp_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P 3306 -u root -ptest_password --silent; do
          echo "Waiting for MySQL..."
          sleep 1
        done

    - name: Run tests
      env:
        DATABASE_URL: mysql+pymysql://root:test_password@127.0.0.1:3306/todoapp_test
      run: |
        # Create test database tables
        python -c "
        import models
        from database import engine
        models.Base.metadata.create_all(bind=engine)
        "
        
        # Run tests
        pytest tests/ -v --tb=short
      continue-on-error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test-results/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/staging'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker ${{ env.REGISTRY }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=staging-latest

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:staging-latest
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}

    - name: Create staging namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy MySQL to staging
      run: |
        # Update the image tag in the deployment files for staging
        sed -i 's/namespace: default/namespace: staging/g' k8s/mysql-deployment.yaml
        sed -i 's/storage: 10Gi/storage: 5Gi/g' k8s/mysql-deployment.yaml
        kubectl apply -f k8s/mysql-deployment.yaml

    - name: Wait for MySQL to be ready
      run: |
        kubectl wait --for=condition=ready pod -l app=mysql -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Deploy FastAPI app to staging
      run: |
        # Update the deployment for staging
        sed -i 's/namespace: default/namespace: staging/g' k8s/fastapi-deployment.yaml
        sed -i 's/replicas: 2/replicas: 1/g' k8s/fastapi-deployment.yaml
        sed -i "s|image: asia-southeast1-docker.pkg.dev/verdant-bruin-464819-i9/fastapi-todoapp/fastapi-todoapp:v1|image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:staging-latest|g" k8s/fastapi-deployment.yaml
        kubectl apply -f k8s/fastapi-deployment.yaml

    - name: Wait for deployment to be ready
      run: |
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Run smoke tests
      run: |
        # Get the service URL
        SERVICE_IP=$(kubectl get service fastapi-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$SERVICE_IP" ]; then
          # If LoadBalancer IP is not available, use port-forward for testing
          kubectl port-forward service/fastapi-service 8080:80 -n ${{ env.NAMESPACE }} &
          sleep 10
          SERVICE_URL="http://localhost:8080"
        else
          SERVICE_URL="http://$SERVICE_IP"
        fi
        
        # Run smoke tests
        echo "Testing health endpoint..."
        curl -f $SERVICE_URL/health || exit 1
        
        echo "Testing main page..."
        curl -f $SERVICE_URL/ || exit 1
        
        echo "Smoke tests passed!"

    - name: Update deployment status
      run: |
        echo "Deployment completed successfully!"
        echo "Staging URL: http://$(kubectl get service fastapi-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, security-scan, build, deploy-staging]
    if: always()
    
    steps:
    - name: Notify on Success
      if: needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.build.result == 'success' && needs.deploy-staging.result == 'success'
      run: |
        echo "üéâ Pipeline completed successfully!"
        echo "‚úÖ Tests: Passed"
        echo "‚úÖ Security Scan: Passed"
        echo "‚úÖ Build: Passed"
        echo "‚úÖ Deploy: Passed"
        
        # Send GitHub notification using the built-in GITHUB_TOKEN
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues \
          -d '{
            "title": "‚úÖ Staging Deployment Successful - ${{ github.sha }}",
            "body": "The staging deployment pipeline has completed successfully!\n\n**Details:**\n- Commit: ${{ github.sha }}\n- Branch: ${{ github.ref }}\n- Tests: ‚úÖ Passed\n- Security Scan: ‚úÖ Passed\n- Build: ‚úÖ Passed\n- Deploy: ‚úÖ Passed\n\n**Staging URL:** Check the deployment logs for the staging URL.",
            "labels": ["deployment", "staging", "success"]
          }'

    - name: Notify on Failure
      if: needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.build.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "‚ùå Pipeline failed!"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Deploy: ${{ needs.deploy-staging.result }}"
        
        # Send failure notification using built-in GITHUB_TOKEN
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/issues \
          -d '{
            "title": "‚ùå Staging Deployment Failed - ${{ github.sha }}",
            "body": "The staging deployment pipeline has failed!\n\n**Details:**\n- Commit: ${{ github.sha }}\n- Branch: ${{ github.ref }}\n- Tests: ${{ needs.test.result }}\n- Security Scan: ${{ needs.security-scan.result }}\n- Build: ${{ needs.build.result }}\n- Deploy: ${{ needs.deploy-staging.result }}\n\n**Action Required:** Please check the workflow logs and fix the issues.",
            "labels": ["deployment", "staging", "failure"]
          }'
